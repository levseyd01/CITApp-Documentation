name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - stable
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - stable

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job

    # Needed so we can retrieve the OIDC token & do deployments
    permissions:
       id-token: write
       contents: read

    steps:
      # 1) Check out your repo
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
          
      # 2) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      # 3) Install Sphinx + dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme sphinx-design sphinx-copybutton sphinx-togglebutton sphinx-tippy myst-parser sphinx_book_theme rst2pdf
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f source/requirements.txt ]; then pip install -r source/requirements.txt; fi
          
      # 4) Temporarily remove problematic extension from conf.py
      - name: Create modified conf.py without _ext dependency
        run: |
          cp source/conf.py source/conf.py.backup
          sed -i "s/'_ext.missing_ref_handler',*/# '_ext.missing_ref_handler', # temporarily removed for build/g" source/conf.py

          echo "Modified conf.py:"
          grep -n "missing_ref_handler" source/conf.py || echo "String not found in conf.py"
          
      # 5) Build Sphinx docs
      - name: Build Sphinx docs
        run: |
          echo "Current directory structure:"
          ls -la

          echo "Python path:"
          python -c "import sys; print(sys.path)"

          # Build with Makefile (outputs to build/html by default)
          make html

          echo "Checking build directory:"
          ls -la build/html || echo "No build/html directory found!"

          # Copy routes.json if you have it, so it deploys with your site
          if [ -f "routes.json" ] && [ -d "build/html" ]; then
            echo "Copying routes.json to build/html"
            cp routes.json build/html/
          fi
          
      # 6) Install OIDC client (only needed if you want the ID token below)
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client

      # 7) Fetch an OIDC token (sometimes needed by the SWA deploy action)
      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
           script: |
               const coredemo = require('@actions/core')
               return await coredemo.getIDToken()
           result-encoding: string

      # 8) Deploy the built site to Azure Static Web Apps
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Make sure this matches your actual GitHub secret name
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_HAPPY_PEBBLE_08AF6A11E }}
          action: "upload"
          # These paths should align with how your docs are built
          app_location: "build/html"
          api_location: ""
          output_location: ""
          # If you have an ID token from above
          github_id_token: ${{ steps.idtoken.outputs.result }}
          # If you want to specify a routes.json location relative to app_location
          routes_location: "/"

  # This second job closes the PR if it was merged/closed
  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Must be the same secret so it can manage PR statuses
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_HAPPY_PEBBLE_08AF6A11E }}
          action: "close"
