{"version":3,"file":"scripts/sphinx-book-theme.js","mappings":"mBASA,IAAIA,EAAsBC,IACG,WAAvBC,SAASC,WACXF,IACSC,SAASE,iBAClBF,SAASE,iBAAiB,mBAAoBH,GAE9CC,SAASG,YAAY,sBAAsB,WACd,YAAvBH,SAASC,YAA0BF,GACzC,GACF,EAkKFK,OAAOC,aAtCY,KACjB,IAAIC,EAAQN,SAASO,cAAc,cACrBD,EAAME,mBAGPC,UAAUC,SAAS,wBAC9BJ,EAAMK,mBACJ,WACA,iDAIJC,WAAW,EA2BbR,OAAOS,iBAzJgB,KACrB,IAAIC,EACDd,SAASe,mBAAoD,OAA/Bf,SAASe,mBACvCf,SAASgB,yBAC6B,OAArChB,SAASgB,wBACb,IAAIC,EAASjB,SAASkB,gBACjBJ,GAQHK,QAAQC,IAAI,8BACRpB,SAASqB,eACXrB,SAASqB,iBACArB,SAASsB,sBAClBtB,SAASsB,yBAXXH,QAAQC,IAAI,+BACRH,EAAOM,kBACTN,EAAOM,oBACEN,EAAOO,yBAChBP,EAAOO,0BASX,EA0IF1B,GAzHkB,KAChB,IAAI2B,EAAgB,GACpB,IAwCIC,EAAc,IAAIC,sBAxCA,CAACC,EAASC,KAE9BD,EAAQE,SAASC,IACf,GAAIA,EAAMC,eAERP,EAAcQ,KAAKF,EAAMG,aAGzB,IAAK,IAAIC,EAAK,EAAGA,EAAKV,EAAcW,OAAQD,IAC1C,GAAIV,EAAcU,KAAQJ,EAAMG,OAAQ,CACtCT,EAAcY,OAAOF,EAAI,GACzB,KACF,CAEJ,IAIEV,EAAcW,OAAS,EACzBpC,SAASO,cAAc,4BAA4BE,UAAU6B,IAAI,QAEjEtC,SACGO,cAAc,4BACdE,UAAU8B,OAAO,OACtB,GAYY,CAEZC,WAAY,qBAaVC,EAAiB,GATG,CACtB,aACA,WACA,SACA,iBACA,aACA,UACA,UAGcX,SAASK,IAEvBM,EAAeR,KAEX,IAAIE,IACJ,QAAQA,IACR,IAAIA,EAAGO,QAAQ,IAAK,OACpB,QAAQP,EAAGO,QAAQ,IAAK,OAE3B,IAEH1C,SAAS2C,iBAAiBF,EAAeG,KAAK,OAAOd,SAASK,IAC5DT,EAAYmB,QAAQV,EAAG,IAIJ,IAAIR,sBA1CO,CAACC,EAASC,KAEpCD,EAAQ,GAAGkB,mBAAmBC,EAAI,EACpC/C,SAASgD,KAAKvC,UAAU6B,IAAI,YAE5BtC,SAASgD,KAAKvC,UAAU8B,OAAO,WACjC,IAqCaM,QAAQ7C,SAASO,cAAc,4BAA4B,IAmD5ET,GA1BA,WACE,IAAImD,EAAkB,CACpB,0BACA,aACA,qBACA,sBACA,wBACA,qBACA,qBACA,cACAL,KAAK,KACP5C,SAAS2C,iBAAiBM,GAAiBnB,SAASK,IAClDA,EAAG1B,UAAU6B,IAAI,UAAU,GAE/B,G","sources":["webpack://sphinx_book_theme/./src/sphinx_book_theme/assets/scripts/index.js"],"sourcesContent":["// Import CSS variables\r\n// ref: https://css-tricks.com/getting-javascript-to-talk-to-css-and-sass/\r\nimport \"../styles/index.scss\";\r\n\r\n/**\r\n * A helper function to load scripts when the DOM is loaded.\r\n * This waits for everything to be on the page first before running, since\r\n * some functionality doesn't behave properly until everything is ready.\r\n */\r\nvar sbRunWhenDOMLoaded = (cb) => {\r\n  if (document.readyState != \"loading\") {\r\n    cb();\r\n  } else if (document.addEventListener) {\r\n    document.addEventListener(\"DOMContentLoaded\", cb);\r\n  } else {\r\n    document.attachEvent(\"onreadystatechange\", function () {\r\n      if (document.readyState == \"complete\") cb();\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Toggle full-screen with button\r\n *\r\n * There are some browser-specific hacks in here:\r\n * - Safari requires a `webkit` prefix, so this uses conditionals to check for that\r\n *   ref: https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\n */\r\nvar toggleFullScreen = () => {\r\n  var isInFullScreen =\r\n    (document.fullscreenElement && document.fullscreenElement !== null) ||\r\n    (document.webkitFullscreenElement &&\r\n      document.webkitFullscreenElement !== null);\r\n  let docElm = document.documentElement;\r\n  if (!isInFullScreen) {\r\n    console.log(\"[SBT]: Entering full screen\");\r\n    if (docElm.requestFullscreen) {\r\n      docElm.requestFullscreen();\r\n    } else if (docElm.webkitRequestFullscreen) {\r\n      docElm.webkitRequestFullscreen();\r\n    }\r\n  } else {\r\n    console.log(\"[SBT]: Exiting full screen\");\r\n    if (document.exitFullscreen) {\r\n      document.exitFullscreen();\r\n    } else if (document.webkitExitFullscreen) {\r\n      document.webkitExitFullscreen();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Manage scrolling behavior. This is primarily two things:\r\n *\r\n * 1. Hide the Table of Contents any time sidebar content is on the screen.\r\n *\r\n * This will be triggered any time a sidebar item enters or exits the screen.\r\n * It adds/removes items from an array if they have entered the screen, and\r\n * removes them when they exit the screen. It hides the TOC if anything is\r\n * on-screen.\r\n *\r\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\r\n *\r\n * 2. Add a `scrolled` class to <body> to trigger CSS changes.\r\n */\r\nvar initTocHide = () => {\r\n  var onScreenItems = [];\r\n  let hideTocCallback = (entries, observer) => {\r\n    // Check whether any sidebar item is displayed\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        // If an element just came on screen, add it our list\r\n        onScreenItems.push(entry.target);\r\n      } else {\r\n        // Otherwise, if it's in our list then remove it\r\n        for (let ii = 0; ii < onScreenItems.length; ii++) {\r\n          if (onScreenItems[ii] === entry.target) {\r\n            onScreenItems.splice(ii, 1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Hide the TOC if any margin content is displayed on the screen\r\n    if (onScreenItems.length > 0) {\r\n      document.querySelector(\"div.bd-sidebar-secondary\").classList.add(\"hide\");\r\n    } else {\r\n      document\r\n        .querySelector(\"div.bd-sidebar-secondary\")\r\n        .classList.remove(\"hide\");\r\n    }\r\n  };\r\n  let manageScrolledClassOnBody = (entries, observer) => {\r\n    // The pixel is at the top, so if we're < 0 that it means we've scrolled\r\n    if (entries[0].boundingClientRect.y < 0) {\r\n      document.body.classList.add(\"scrolled\");\r\n    } else {\r\n      document.body.classList.remove(\"scrolled\");\r\n    }\r\n  };\r\n\r\n  // Set up the intersection observer to watch all margin content\r\n  let options = {\r\n    // Trigger callback when the top of a margin item is 1/3 up the screen\r\n    rootMargin: \"0px 0px -33% 0px\",\r\n  };\r\n  let tocObserver = new IntersectionObserver(hideTocCallback, options);\r\n  // TODO: deprecate popout after v0.5.0\r\n  const selectorClasses = [\r\n    \"marginnote\",\r\n    \"sidenote\",\r\n    \"margin\",\r\n    \"margin-caption\",\r\n    \"full-width\",\r\n    \"sidebar\",\r\n    \"popout\",\r\n  ];\r\n  let marginSelector = [];\r\n  selectorClasses.forEach((ii) => {\r\n    // Use three permutations of each class name because `tag_` and `_` used to be supported\r\n    marginSelector.push(\r\n      ...[\r\n        `.${ii}`,\r\n        `.tag_${ii}`,\r\n        `.${ii.replace(\"-\", \"_\")}`,\r\n        `.tag_${ii.replace(\"-\", \"_\")}`,\r\n      ],\r\n    );\r\n  });\r\n  document.querySelectorAll(marginSelector.join(\", \")).forEach((ii) => {\r\n    tocObserver.observe(ii);\r\n  });\r\n\r\n  // Set up the observer to check if we've scrolled from top of page\r\n  let scrollObserver = new IntersectionObserver(manageScrolledClassOnBody);\r\n  scrollObserver.observe(document.querySelector(\".sbt-scroll-pixel-helper\"));\r\n};\r\n\r\n/**\r\n * Activate Thebe with a custom button click.\r\n */\r\nvar initThebeSBT = () => {\r\n  var title = document.querySelector(\"section h1\");\r\n  var sibling = title.nextElementSibling;\r\n  // If the next element after the title isn't a thebe button, add one now.\r\n  // That way it is initiatlized when thebe is first-clicked and isn't re-added after.\r\n  if (!sibling.classList.contains(\"thebe-launch-button\")) {\r\n    title.insertAdjacentHTML(\r\n      \"afterend\",\r\n      \"<button class='thebe-launch-button'></button>\",\r\n    );\r\n  }\r\n  // This function is provided by sphinx-thebe\r\n  initThebe();\r\n};\r\n\r\n/**\r\n * Add no print class to certain DOM elements\r\n */\r\n\r\nfunction addNoPrint() {\r\n  var noPrintSelector = [\r\n    \".bd-header-announcement\",\r\n    \".bd-header\",\r\n    \".bd-header-article\",\r\n    \".bd-sidebar-primary\",\r\n    \".bd-sidebar-secondary\",\r\n    \".bd-footer-article\",\r\n    \".bd-footer-content\",\r\n    \".bd-footer\",\r\n  ].join(\",\");\r\n  document.querySelectorAll(noPrintSelector).forEach((ii) => {\r\n    ii.classList.add(\"noprint\");\r\n  });\r\n}\r\n\r\n/**\r\n * Set up callback functions for UI click actions\r\n */\r\nwindow.initThebeSBT = initThebeSBT;\r\nwindow.toggleFullScreen = toggleFullScreen;\r\n\r\n/**\r\n * Set up functions to load when the DOM is ready\r\n */\r\nsbRunWhenDOMLoaded(initTocHide);\r\nsbRunWhenDOMLoaded(addNoPrint);\r\n"],"names":["sbRunWhenDOMLoaded","cb","document","readyState","addEventListener","attachEvent","window","initThebeSBT","title","querySelector","nextElementSibling","classList","contains","insertAdjacentHTML","initThebe","toggleFullScreen","isInFullScreen","fullscreenElement","webkitFullscreenElement","docElm","documentElement","console","log","exitFullscreen","webkitExitFullscreen","requestFullscreen","webkitRequestFullscreen","onScreenItems","tocObserver","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","push","target","ii","length","splice","add","remove","rootMargin","marginSelector","replace","querySelectorAll","join","observe","boundingClientRect","y","body","noPrintSelector"],"sourceRoot":""}